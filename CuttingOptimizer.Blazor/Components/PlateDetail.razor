@using CuttingOptimizer.AppLogic.Models;
@using CuttingOptimizer.AppLogic.Services;
@using CuttingOptimizer.Domain.Models;
@using System.Globalization;

@inject ICalculatorService calculateService;

<div class="container-fluid">
    <div class="row mb-3">
        <h4 class="title-border col-12">Materiaal: @Svg.Plate.ID</h4>
        <div class="col-3 pl-3 pr-3 pt-0">
            <label class="fw-bold">Lengte: </label>
            <span>@Svg.Plate.Length mm</span>
        </div>
        <div class="col-3 pl-3 pr-3 pt-0">
            <label class="fw-bold">Breedte: </label>
            <span>@Svg.Plate.Width mm</span>
        </div>
        <div class="col-3 pl-3 pr-3 pt-0">
            <label class="fw-bold">Dikte: </label>
            <span>@Svg.Plate.Height mm</span>
        </div>
        <div class="col-3 pl-3 pr-3 pt-0">
            <label class="fw-bold">Trim: </label>
            <span>@Svg.Plate.Trim mm</span>
        </div>
        <div class="col-3 pl-3 pr-3 pt-0">
            <label class="fw-bold">Aantal: </label>
            <span>@Count</span>
        </div>
@*        <div class="col-3 pl-3 pr-3 pt-0">
            <label class="font-weight-bold">Fineer: </label>

            @if (Svg.Plate.Veneer)
            {
                <span> ja</span>
            }
            else
            {
                <span> nee</span>
            }
        </div>*@
    </div>
    <div class="row mb-3">
        <h4 class="col-12 title-border">Te zagen</h4>
        @{
            var groupByProduct = Svg.Groups.Where(c => c.ID != 0).GroupBy(c => c.Product.ID);
        }
        <div class="col-3">
            <label class="fw-bold">Aantal</label>
            @foreach (var group in groupByProduct)
            {
                <div>@group.Count()</div>
            }
        </div>
        <div class="col-3">
            <label class="fw-bold">Item</label>
            @foreach (var group in groupByProduct)
            {
                <div>@group.Key</div>
            }
        </div>
        <div class="col-3">
            <label class="fw-bold">Lengte</label>
            @foreach (var group in groupByProduct)
            {
                <div>@group.First().Length mm</div>
            }
        </div>
        <div class="col-3">
            <label class="fw-bold">Breedte</label>
            @foreach (var group in groupByProduct)
            {
                <div>@group.First().Width mm</div>
            }
        </div>
    </div>
    <div class="row mb-3">
        <h4 class="col-12 title-border">Parameters</h4>
        <div class="col-6 pl-3 pr-3 pt-0">
            <label class="fw-bold">Verlies:</label>
            <span>@AreaLossPercentage.ToString("P", CultureInfo.InvariantCulture)</span>
        </div>
        <div class="col-6 pl-3 pr-3 pt-0">
            <label class="fw-bold">Snijlijnen:</label>
            <span>@CutLines</span>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Saw Saw { get; set; }

    [Parameter]
    public Svg Svg { get; set; }

    [Parameter]
    public int Count { get; set; }

    private double AreaLossPercentage
    {
        get
        {
            double percentage = Svg.Groups.Where(c => c.ID == 0).Sum(c => c.Area) / (double)Svg.Area;
            return percentage > 0 ? percentage : 0;
        }
    }

    private int CutLines
    {
        get
        {
            return calculateService.CalculateCutLines(Svg);
        }
    }
}
