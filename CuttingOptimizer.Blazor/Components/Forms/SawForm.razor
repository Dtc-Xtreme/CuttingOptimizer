@using CuttingOptimizer.AppLogic.Services;
@using CuttingOptimizer.Domain.Models;
@using CuttingOptimizer.Infrastructure.Repositories;

@inject ISawRepository repo;
@inject IApiService api;

    <div class="row title-bar">
        <div class="form-group col-auto">
            <h4>Zaag</h4>
        </div>
    </div>

    <div class="container-fluid">
        <div class="row">
            <div class="form-group col-6">
                <label for="sawID">Zaagblad</label>
                <InputText class="form-control" id="sawID" @bind-Value="Saw.ID" placeholder="ID" list="sawList" @oninput="(args) => SearchOrSelect(args)" />
                <datalist id="sawList">
                    @if (SearchSaws != null)
                    {
                        foreach (Saw sw in SearchSaws)
                        {
                            <option value="@sw.ID">@sw.ID - (@sw.Thickness mm)</option>
                        }
                    }
                </datalist>
            </div>
            <div class="form-group col-6">
                <label for="sawThickness">Zaagsnede</label>
                <InputNumber class="form-control" id="sawThickness" @bind-Value="Saw.Thickness" placeholder="Dikte" />
            </div>
        </div>
    </div>

@code {
    [Parameter]
    public Saw Saw { get; set; }

    private List<Saw> SearchSaws = new List<Saw>();
    //{
    //    new Saw("SX1", 1),
    //    new Saw("SX2", 5),
    //    new Saw("SX3", 10)
    //};

    protected override async void OnInitialized()
    {
        //SearchSaws = repo.Saws.ToList();
        SearchSaws = await api.GetAllSaws();

        if(Saw == null)
        {
            Saw saw = new Saw
            {
                ID = "SX0",
                Thickness = 5
            };
        };
    }

    private async void SearchOrSelect(ChangeEventArgs args)
    {
        Saw? sawResult = SearchSaws != null ? SearchSaws.FirstOrDefault(c => c.ID.ToLower().Equals(args.Value.ToString().ToLower())) : null;
        if (sawResult != null)
        {
            Saw.ID = sawResult.ID;
            Saw.Thickness = sawResult.Thickness;
        }
        //else
        //{
        //    SearchSaws = await api.SearchSaws(args.Value.ToString());
        //    //StateHasChanged();
        //}
   }
}