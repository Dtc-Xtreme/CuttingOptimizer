@using CuttingOptimizer.AppLogic.Services;
@using CuttingOptimizer.Domain.Models;
@using CuttingOptimizer.Infrastructure.Repositories;
@using Blazored.LocalStorage;

@inject IApiService api;
@inject ILocalStorageService localStorage;
@inject IJSRuntime JSRuntime;

    <div class="row title-bar">
        <div class="form-group col-auto">
            <h4>Instellingen</h4>
        </div>
    </div>

    <div class="container-fluid">
        <div class="row">
            <div class="form-group col-12 col-md-2 mb-3">
                <label class="form-label" for="sawID">Zaagblad</label>
                <InputText class="form-control" id="sawID" @bind-Value="Saw.ID" placeholder="ID" list="sawList" @oninput="(args) => SearchOrSelect(args)" />
                <datalist id="sawList">
                    @if (SearchSaws != null)
                    {
                        foreach (Saw sw in SearchSaws)
                        {
                            <option value="@sw.ID">@sw.ID - (@sw.Thickness mm)</option>
                        }
                    }
                </datalist>
            </div>

        <div class="form-group col-12 col-md-2 mb-3">
                <label class="form-label" for="sawThickness">Zaagsnede</label>
                <InputNumber class="form-control" id="sawThickness" @bind-Value="Saw.Thickness" placeholder="Dikte" />
            </div>

        <div class="form-group col-auto mb-3">
                <label class="form-label" for="plateBase">Fineer</label>
                <InputCheckbox class="form-control-checkbox checkbox-big" id="veneerId" name="check" @bind-Value="Veneer" placeholder="Fineer" />
            </div>
        </div>
    </div>

<button type="button" class="btn btn-secondary" @onclick="Save" disabled="@SaveButtonDisabled"><span class="oi oi-file" /> Instellingen opslaan</button>

    <div></div>
@code {
    private bool SaveButtonDisabled { get; set; } = false;

    [Parameter]
    public Saw Saw { get; set; }

    [Parameter]
    public bool Veneer { get; set; }

    private string Result { get; set; }

    private List<Saw> SearchSaws = new List<Saw>();

    protected override void OnInitialized()
    {
        if(Saw == null)
        {
            Saw saw = new Saw
            {
                ID = "SX0",
                Thickness = 5
            };
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) SearchSaws = await api.GetAllSaws();
    }

    private async void SearchOrSelect(ChangeEventArgs args)
    {
         if(SearchSaws != null && SearchSaws.Count > 0)
        {
            Saw? sawResult = SearchSaws != null ? SearchSaws.FirstOrDefault(c => c.ID.ToLower().Equals(args.Value.ToString().ToLower())) : null;
            if (sawResult != null)
            {
                Saw.ID = sawResult.ID;
                Saw.Thickness = sawResult.Thickness;
            }
        }
    }

    private async Task Save()
    {
        SaveButtonDisabled = true;
        await localStorage.SetItemAsync("currentSaw", Saw);
        await localStorage.SetItemAsync("currentVeneer", Veneer);
        await JSRuntime.InvokeAsync<object>("Alert", "Instellingen zijn opgeslagen!");
        SaveButtonDisabled = false;
    }
}