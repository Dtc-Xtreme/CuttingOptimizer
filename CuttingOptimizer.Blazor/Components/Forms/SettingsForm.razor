@using CuttingOptimizer.AppLogic.Services;
@using CuttingOptimizer.Domain.Models;
@using CuttingOptimizer.Infrastructure.Repositories;
@using Blazored.LocalStorage;


@inject ISawRepository repo;
@inject IApiService api;
@inject ILocalStorageService localStorage;
@inject IJSRuntime JSRuntime;

    <div class="row title-bar">
        <div class="form-group col-auto">
            <h4>Instellingen</h4>
        </div>
    </div>

    <div class="container-fluid">
        <div class="row">
            <div class="form-group col-1 text-center">
                <label class="form-label" for="sawID">Zaagblad</label>
                <InputText class="form-control" id="sawID" @bind-Value="Saw.ID" placeholder="ID" list="sawList" @oninput="(args) => SearchOrSelect(args)" />
                <datalist id="sawList">
                    @if (SearchSaws != null)
                    {
                        foreach (Saw sw in SearchSaws)
                        {
                            <option value="@sw.ID">@sw.ID - (@sw.Thickness mm)</option>
                        }
                    }
                </datalist>
            </div>

            <div class="form-group col-1 text-center">
                <label class="form-label" for="sawThickness">Zaagsnede</label>
                <InputNumber class="form-control" id="sawThickness" @bind-Value="Saw.Thickness" placeholder="Dikte" />
            </div>

            <div class="form-group col-1 text-center">
                <label class="form-label" for="plateBase">Fineer</label>
                <InputCheckbox class="form-control-checkbox checkbox-big" id="veneerId" name="check" @bind-Value="Veneer" placeholder="Fineer" />
            </div>
        </div>
    </div>

    <button type="button" class="btn btn-secondary mt-4" @onclick="Save"><span class="oi oi-file" /> Instellingen opslaan</button>

    <div></div>
@code {
    [Parameter]
    public Saw Saw { get; set; }

    [Parameter]
    public bool Veneer { get; set; }

    private string Result { get; set; }

    private List<Saw> SearchSaws = new List<Saw>();
    //{
    //    new Saw("SX1", 1),
    //    new Saw("SX2", 5),
    //    new Saw("SX3", 10)
    //};

    protected override async void OnInitialized()
    {
        //SearchSaws = repo.Saws.ToList();
        SearchSaws = await api.GetAllSaws();

        //if(Saw == null)
        //{
        //    Saw saw = new Saw
        //    {
        //        ID = "SX0",
        //        Thickness = 5
        //    };
        //};
    }

    private async void SearchOrSelect(ChangeEventArgs args)
    {
        Saw? sawResult = SearchSaws != null ? SearchSaws.FirstOrDefault(c => c.ID.ToLower().Equals(args.Value.ToString().ToLower())) : null;
        if (sawResult != null)
        {
            Saw.ID = sawResult.ID;
            Saw.Thickness = sawResult.Thickness;
        }
        //else
        //{
        //    SearchSaws = await api.SearchSaws(args.Value.ToString());
        //    //StateHasChanged();
        //}
    }

    private async Task Save()
    {
        await localStorage.SetItemAsync("currentSaw", Saw);
        await localStorage.SetItemAsync("currentVeneer", Veneer);
        await JSRuntime.InvokeAsync<object>("Alert", "Instellingen zijn opgeslagen!");
    }
}