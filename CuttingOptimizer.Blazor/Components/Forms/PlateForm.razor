@using CuttingOptimizer.Domain.Models;
@using CuttingOptimizer.AppLogic.Services;

@inject IApiService api;

    <div class="row title-bar">
    <div class="col-auto">
        <button type="button" class="btn btn-secondary" @onclick="AddPlate"><b>+</b></button>
    </div>
        <div class="col-auto">
            <h4 class="mt-1">Materialen</h4>
        </div>
    </div>

    <div class="container-fluid">
    @foreach (Plate plate in Plates)
    {
        <div class="row my-1">
            <div class="form-group col-1 text-center">
                @if (plate == Plates[0])
                {
                    <label class="form-label" for="plateID">Materiaal</label>
                }
                <InputText class="form-control" id="plateID" @bind-Value="plate.ID" placeholder="ID" list="plateList" @onkeyup="() => SearchOrSelect(plate.ID, Plates.IndexOf(plate))" />
                <datalist id="plateList">
                    @foreach (Plate pl in SearchPlates)
                    {
                        <option value="@pl.ID">@pl.ID - (@pl.ToString())</option>
                    }
                </datalist>
            </div>
            <div class="form-group col-1 text-center">
                @if (plate == Plates[0])
                {
                    <label class="form-label" for="plateQuantity">Aantal</label>
                }
                <InputNumber class="form-control" id="plateQuantity" @bind-Value="plate.Quantity" placeholder="#" />
            </div>
            <div class="form-group col-1 text-center">
                @if (plate == Plates[0])
                {
                    <label class="form-label" for="plateLength">Lengte</label>
                }
                <InputNumber class="form-control" id="plateLength" @bind-Value="plate.Length" placeholder="Lengte" />
            </div>
            <div class="form-group col-1 text-center">
                @if (plate == Plates[0])
                {
                    <label class="form-label" for="plateWidth">Breedte</label>
                }
                <InputNumber class="form-control" id="plateWidth" @bind-Value="plate.Width" placeholder="Breedte" />
            </div>
            <div class="form-group col-1 text-center">
                @if (plate == Plates[0])
                {
                    <label class="form-label" for="plateHeight">Dikte</label>
                }
                <InputNumber class="form-control" id="plateHeight" @bind-Value="plate.Height" placeholder="Hoogte" />
            </div>
            <div class="form-group col-1 text-center">
                @if (plate == Plates[0])
                {
                    <label class="form-label" for="plateTrim">Trim</label>
                }
                <InputNumber class="form-control" id="plateTrim" @bind-Value="plate.Trim" placeholder="Trim" />
            </div>
            <div class="form-group col-1 text-center">
                @if (plate == Plates[0])
                {
                    <label class="form-label" for="platePriority">Prio</label>
                }
                <InputNumber class="form-control" id="platePriority" @bind-Value="plate.Priority" placeholder="Prio" />
            </div>
@*            <div class="form-group w-100 col-lg-1 col-xs-12 text-center">
                @if (plate == Plates[0])
                {
                    <label for="plateVeneer" class="pr-1">Fineer</label>
                }
                <InputCheckbox class="form-control-checkbox checkbox-big" id="plateVeneer" @bind-Value="plate.Veneer" placeholder="Fineer" />
            </div>*@
            <div class="form-group col-1 text-center">
                @if (plate == Plates[0])
                {
                    <label class="form-label" for="plateBase">Standaard</label>
                }
            <InputCheckbox class="form-control-checkbox checkbox-big" id="plateBase" name="check" @bind-Value="plate.Base" placeholder="Basis" @onclick="() => CheckBase(plate)" />
            </div>
            <div class="form-group col-1 text-center">
                @if (plate == Plates[0])
                {
                    <label class="form-label">Verwijder</label>
                }
                <button type="button" class="form-control btn btn-danger" @onclick="() => RemovePlate(plate)"><span class="oi oi-trash"/></button>
            </div>
        </div>
        }
</div>


@code {
    [Parameter]
    public List<Plate> Plates { get; set; }

    private List<Plate> SearchPlates = new List<Plate>();
    //{
    //        new Plate{
    //            ID = "PL255",
    //            Length = 2000, 
    //            Width = 500,
    //            Height = 5,
    //            Priority = 1
    //        },
    //        new Plate{
    //            ID = "PL155",
    //            Length = 1000,
    //            Width = 500,
    //            Height = 5,
    //            Priority = 1
    //        }
    //    };

    protected override async void OnInitialized()
    {
        SearchPlates = await api.GetAllPlates();

        if (Plates.Count() == 0)
        {
            Plate plate = new Plate
                {
                    ID = "PLX0",
                    Base = true,
                    Quantity = 1,
                    Priority = 1,                
                };
            Plates.Add(plate);
        }
    }

    private void AddPlate()
    {
        Plate plate = new Plate
            {
                ID = "PLX0",
                Base = false,
                Quantity = 1,
                Priority = 1
            };
        Plates.Add(plate);
    }

    private void RemovePlate(Plate plate)
    {
        if (Plates.Count() > 1){
            Plates.Remove(plate);
        }

        if (plate.Base == true)
        {
            Plates.First().Base = true;
        }
    }

    private void SearchOrSelect(string value, int position)
    {
        Plate? plateResult = SearchPlates.FirstOrDefault(c => c.ID.ToLower() == Plates[position].ID.ToLower());
        if (plateResult != null)
        {
            bool b = Plates[position].Base;
            Plates[position] = new Plate(plateResult);
            Plates[position].Quantity = 1;
            Plates[position].Base = b;
            StateHasChanged();

        }
        //else
        //{
        //    // change SearchPlates with api call 
        //}
    }

    private void CheckBase(Plate plate)
    {
        Plates.ForEach(c => c.Base = false);
        plate.Base = true;
    }
}