@using CuttingOptimizer.Domain.Models;
@using CuttingOptimizer.AppLogic.Services;

@inject IApiService api;

    <div class="row title-bar">
        <div class="col-auto">
            <button type="button" class="btn btn-secondary" @onclick="AddPlate"><b>+</b></button>
        </div>
        <div class="col-auto">
            <h4 class="mt-1">Materialen</h4>
        </div>
    </div>

    <div class="container-fluid mt-2">
    @foreach (Plate plate in Plates)
    {
        <div class="row my-4 my-xl-0">
            <div class="form-group col-12 col-xl-2 md-5 mb-xl-1">
                @if (plate == Plates[0])
                {
                    <label class="form-label d-none d-xl-block" for="plateID">Materiaal</label>
                }
                <InputText class="form-control" id="plateID" @bind-Value="plate.ID" placeholder="ID" list="plateList" @onkeyup="() => SearchOrSelect(plate.ID, Plates.IndexOf(plate))" />
                <datalist id="plateList">
                    @if(SearchPlates != null)
                    {
                        foreach (Plate pl in SearchPlates)
                        {
                            <option value="@pl.ID">@pl.ID - (@pl.ToString())</option>
                        }
                    }
                </datalist>
            </div>
            <div class="form-group col-12 col-xl-1 md-5 mb-xl-1">
                @if (plate == Plates[0])
                {
                    <label class="form-label d-none d-xl-block" for="plateQuantity">Aantal</label>
                }
                <InputNumber class="form-control" id="plateQuantity" @bind-Value="plate.Quantity" placeholder="Aantal" />
            </div>
            <div class="form-group col-12 col-xl-2 md-5 mb-xl-1">
                @if (plate == Plates[0])
                {
                    <label class="form-label d-none d-xl-block" for="plateLength">Lengte</label>
                }
                <InputNumber class="form-control" id="plateLength" @bind-Value="plate.Length" placeholder="Lengte" />
            </div>
            <div class="form-group col-12 col-xl-2 md-5 mb-xl-1">
                @if (plate == Plates[0])
                {
                    <label class="form-label d-none d-xl-block" for="plateWidth">Breedte</label>
                }
                <InputNumber class="form-control" id="plateWidth" @bind-Value="plate.Width" placeholder="Breedte" />
            </div>
            <div class="form-group col-12 col-xl-1 md-5 mb-xl-1">
                @if (plate == Plates[0])
                {
                    <label class="form-label d-none d-xl-block" for="plateHeight">Dikte</label>
                }
                <InputNumber class="form-control" id="plateHeight" @bind-Value="plate.Height" placeholder="Hoogte" />
            </div>
            <div class="form-group col-12 col-xl-1 md-5 mb-xl-1">
                @if (plate == Plates[0])
                {
                    <label class="form-label d-none d-xl-block" for="plateTrim">Trim</label>
                }
                <InputNumber class="form-control" id="plateTrim" @bind-Value="plate.Trim" placeholder="Trim" />
            </div>
            <div class="form-group col-12 col-xl-1 md-5 mb-xl-1">
                @if (plate == Plates[0])
                {
                    <label class="form-label d-none d-xl-block" for="platePriority">Prio</label>
                }
                <InputNumber class="form-control" id="platePriority" @bind-Value="plate.Priority" placeholder="Prio" />
            </div>
@*            <div class="form-group w-100 col-lg-1 col-xs-12 text-center">
                @if (plate == Plates[0])
                {
                    <label for="plateVeneer" class="pr-1">Fineer</label>
                }
                <InputCheckbox class="form-control-checkbox checkbox-big" id="plateVeneer" @bind-Value="plate.Veneer" placeholder="Fineer" />
            </div>*@
            <div class="form-group col-12 col-xl-1 md-5 mb-xl-1">
                @if (plate == Plates[0])
                {
                    <label class="form-label d-none d-xl-block" for="plateBase">Standaard</label>
                }
                <div class="form-check">
                    <InputCheckbox class="form-check-input checkbox-big m-xl-auto" id="plateBase" name="check" @bind-Value="plate.Base" placeholder="Basis" @onclick="() => CheckBase(plate)" />
                    <label class="form-check-label d-block d-xl-none ps-2 pt-1" for="plateBase">Standaard</label>
                </div>

            </div>
            <div class="form-group col-12 col-xl-1 md-5 mb-xl-1">
                @if (plate == Plates[0])
                {
                    <label class="form-label d-none d-xl-block">Verwijder</label>
                }
                <button type="button" class="form-control btn btn-danger" @onclick="() => RemovePlate(plate)"><span class="oi oi-trash"/></button>
            </div>
        </div>
        }
</div>


@code {
    [Parameter]
    public List<Plate> Plates { get; set; }

    private List<Plate>? SearchPlates = new List<Plate>();

    protected override void OnInitialized()
    {
        Plate plate = new Plate
            {
                ID = "PLX0",
                Base = true,
                Quantity = 1,
                Priority = 1,
            };

        if (Plates.Count() == 0) Plates.Add(plate);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) SearchPlates = await api.GetAllPlates();
    }

    private void AddPlate()
    {
        Plate plate = new Plate
            {
                ID = "PLX0",
                Base = false,
                Quantity = 1,
                Priority = 1
            };
        Plates.Add(plate);
    }

    private void RemovePlate(Plate plate)
    {
        if (Plates.Count() > 1){
            Plates.Remove(plate);
        }

        if (plate.Base == true)
        {
            Plates.First().Base = true;
        }
    }

    private void SearchOrSelect(string value, int position)
    {
        if(SearchPlates != null && SearchPlates.Count > 0)
        {
            Plate? plateResult = SearchPlates.FirstOrDefault(c => c.ID.ToLower() == Plates[position].ID.ToLower());
            if (plateResult != null)
            {
                bool b = Plates[position].Base;
                Plates[position] = new Plate(plateResult);
                Plates[position].Quantity = 1;
                Plates[position].Base = b;
                Plates[position].Priority = 1;
                StateHasChanged();

            }
        }
    }

    private void CheckBase(Plate plate)
    {
        Plates.ForEach(c => c.Base = false);
        plate.Base = true;
    }
}