@page "/settings"
@using Blazored.LocalStorage;
@using CuttingOptimizer.Blazor.Components.Forms
@using CuttingOptimizer.Domain.Models;
@using System.Text.Json;
@inject ILocalStorageService localStorage;

<PageTitle>Instellingen</PageTitle>

<div class="container-fluid">
    <div>
        <h3>Instellingen</h3>
        <EditForm Model="@Saw" OnValidSubmit="@HandleSubmit">
            <DataAnnotationsValidator/>
            <SawForm Saw=@Saw />

            <div class="row title-bar">
                <div class="form-group col-auto">
                    <h4>Materiaal</h4>
                </div>
            </div>
            <div class="form-row">
                <div class="form-check w-100 col">
                    <InputCheckbox id="veneerBool" @bind-Value="Veneer" />
                    <label class="form-check-label" for="veneerBool">Fineer</label>
                </div>
            </div>
            <ValidationSummary />
            <button type="submit" class="btn btn-primary mt-3">Opslaan</button>
        </EditForm>
    </div>
</div>

@code {
    private Saw Saw { get; set; }
    private bool Veneer { get; set; } = false;
    private int currentCount = 0;

    protected override  void OnInitialized()
    {
        Saw = new Saw
            {
                ID = "SX0",
                Thickness = 5
            };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //return base.OnAfterRenderAsync(firstRender);
            if (await localStorage.ContainKeyAsync("currentSaw"))
            {
                Saw = await localStorage.GetItemAsync<Saw>("currentSaw");
            }
            else
            {
                await localStorage.SetItemAsync("currentSaw", Saw);
            }
            if (await localStorage.ContainKeyAsync("currentVeneer"))
            {
                Veneer = await localStorage.GetItemAsync<bool>("currentVeneer");
            }
            else
            {
                await localStorage.SetItemAsync("currentVeneer", Veneer);
            }
            StateHasChanged();
        }

    }

    private async Task HandleSubmit()
    {
        await localStorage.SetItemAsync("currentSaw", Saw);
        await localStorage.SetItemAsync("currentVeneer", Veneer);
    }
}
