@page "/calculator"
@using CuttingOptimizer.AppLogic.Models;
@using CuttingOptimizer.AppLogic.Services;
@using CuttingOptimizer.Blazor.Components
@using CuttingOptimizer.Blazor.Components.Forms
@using CuttingOptimizer.Blazor.Models;
@using CuttingOptimizer.Domain.Models;

@inject ICalculatorService calculateService;

<PageTitle>Calculator</PageTitle>

<div class="container-fluid">
    <div class="no-print">
        <h2 class="no-print">Calculator</h2>
        <EditForm Model="@CalculatorFormModel" OnValidSubmit="@HandleSubmit">
            <ObjectGraphDataAnnotationsValidator />

            <SawForm Saw=@CalculatorFormModel.Saw />
            <PlateForm Plates=@CalculatorFormModel.Plates />
            <ProductForm Products=@CalculatorFormModel.Products />
            <ValidationSummary />
            <button type="submit" class="btn btn-primary">Uitrekenen</button>
            <button type="reset" class="btn btn-warning" @onclick="Reset">Reset</button>
        </EditForm>
    </div>
    
    <div>
        @foreach (Svg svg in Svgs)
        {
            <SvgComponent Scale=@Scale Svg=svg Products=@CalculatorFormModel.Products Saw=@CalculatorFormModel.Saw />
        }
    </div>

    <div>
        <Overview />
    </div>
</div>

@code {
    private CalculatorFormModel CalculatorFormModel { get; set; }
    private double Scale { get; set; }
    private int PlateArea { get; set; }
    private int ProductArea { get; set; }

    private List<Svg> Svgs { get; set; }

    protected override void OnInitialized()
    {
        Svgs = new();
        CalculatorFormModel = new();
        CalculatorFormModel.Saw = new Saw("SX1", 2);

        CalculatorFormModel.Plates = new List<Plate>
        {
            new Plate(2, "PL1", 2006, 400, 5, 0, 1),
            //new Plate(2, "PL1", 2006, 400, 5, 0, 1),
            //new Plate(1, "PL3", 1000, 400, 5, 0, 1),
            //new Plate(1, "PL2", 800, 400, 5, 0, 0),
        };

        CalculatorFormModel.Products = new List<Product>
        {
            #region VB1
            new Product(10, "Y1", 170, 40, 5),
            new Product(2, "X2", 800, 40, 5),
            new Product(4, "X3", 800, 40, 5),
            new Product(30, "K1", 200, 40, 5),
            new Product(60, "K2", 200, 40, 5),
            new Product(4, "P3", 150, 40, 5),
            #endregion

            #region VB2
            //new Product(10, "Y1", 170, 50, 5),
            //new Product(2, "X2", 300, 80, 5),
            //new Product(3, "X3", 800, 40, 5),
            //new Product(18, "K1", 200, 30, 5),
            #endregion
        };

        HandleSubmit();
    }

    private void Reset()
    {
        Svgs = new();
        CalculatorFormModel = new();
    }

    public void HandleSubmit()
    {

        bool check = true;
        // Check if a product is bigger than plate
        //int biggestLength = CalculatorFormModel.Plates.MaxBy(c => c.LengthWithTrim).LengthWithTrim;
        //int biggestWidth = CalculatorFormModel.Plates.MaxBy(c => c.WidthWithTrim).WidthWithTrim;
        //bool check = CalculatorFormModel.Products.Any(c => c.Length > biggestLength && c.Width == biggestWidth);

        if (check)
        {
            // Find the biggest plate to represent as 100% width
            Scale = CalculatorFormModel.Plates.Max(c => c.LengthWithTrim) / (double)100;

            // Sort Products from biggest area to smallest
            CalculatorFormModel.Products = CalculatorFormModel.Products.OrderByDescending(c => c.Area).ToList();

            // Create copy of products because ref will change the data
            List<Product> productList = new();

            foreach (Product prod in CalculatorFormModel.Products)
            {
                productList.Add(prod.ShallowCopy());
            }

            // Merge Products with same sizes
            productList = calculateService.CombineProductsWithSameDimentions(productList);

            // Sort Product on area biggest to smallest
            CalculatorFormModel.Plates = CalculatorFormModel.Plates.OrderByDescending(c => c.Priority).ThenByDescending(c => c.Area).ToList();
            productList = productList.OrderByDescending(c => c.Quantity).ThenByDescending(c => c.Area).ToList();

            Svgs = calculateService.Place(CalculatorFormModel.Saw, CalculatorFormModel.Plates, productList.ToList());
        }
    }
}
