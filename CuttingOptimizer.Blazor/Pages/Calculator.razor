@page "/calculator"
@using CuttingOptimizer.AppLogic.Models;
@using CuttingOptimizer.AppLogic.Services;
@using CuttingOptimizer.Blazor.Components
@using CuttingOptimizer.Blazor.Components.Forms
@using CuttingOptimizer.Blazor.Models;
@using CuttingOptimizer.Domain.Models;
@using Blazored.LocalStorage;
@using System.Text.Json;
@using CuttingOptimizer.AppLogic.Services;

@inject ICalculatorService calculateService;
@inject ILocalStorageService localStorage;
@inject IApiService api;
@inject IJSRuntime JSRuntime;

<PageTitle>Platen Optimalisatie</PageTitle>

<div class="container-fluid">
    <div class="row no-print">
        <div class="col">
            <h2>Platen Optimalisatie</h2>
        </div>

        <div class="col-auto mb-4">
            <div class="row">
                <div class="col">
                    <input type="number" class="form-control" @bind-value="SearchQuotation" placeholder="plan nummer" />
                </div>
                <div class="col-auto">
                    <button type="button" class="btn btn-secondary" disabled=@LoadButtonDisabled @onclick=Load>Ophalen van optimalisatieplan
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true" hidden="@(!LoadButtonDisabled)"></span>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <ul class="no-print nav nav-tabs">
        <li class="nav-item">
            <a class="@(SettingsSelected == true ? "active" : "") nav-link subnav-link user-select-none" @onclick="() => ToggleNav(1)">Instellingen</a>
        </li>
        <li class="nav-item">
            <a class="@(QuotationSelected == true ? "active" : "") nav-link subnav-link user-select-none" @onclick="() => ToggleNav(3)">Offerte</a>
        </li>
        <li class="nav-item">
            <a class="@(ProductsAndItemsSelected == true ? "active" : "") nav-link subnav-link user-select-none" @onclick="() => ToggleNav(2)">Materialen & Items</a>
        </li>
    </ul>

    <div class="no-print mt-3">
        <EditForm Model="@CalculatorFormModel" OnValidSubmit="() => HandleSubmit()">
            <ObjectGraphDataAnnotationsValidator />
            <div class="mb-4" hidden="@(!SettingsSelected)">
                <SettingsForm CalculatorFormModel=@CalculatorFormModel />
            </div>
            <div class="" hidden="@(!QuotationSelected)">
                <div class="form-group col-auto mb-3">
                    <label class="form-label" for="quotationId">Offertenummer</label>
                    <InputText class="form-control" id="quotationId" name="check" @bind-Value="CalculatorFormModel.QuotationID" placeholder="Offertenummer" />
                </div>
            </div>
            <div class="" hidden="@(!ProductsAndItemsSelected)">
                <div>
                    <PlateForm Plates=@CalculatorFormModel.Plates />
                </div>
                <div class="mt-4">
                    <ProductForm Products=@CalculatorFormModel.Products />
                </div>
            </div>
            <div>
                <ValidationSummary />
            </div>
            <div class="col mt-3">
                <button type="submit" class="btn btn-primary"><span class="oi oi-calculator" /> Uitrekenen</button>
                <button type="reset" class="btn btn-warning" @onclick="Reset"><span class="oi oi-reload" /> Resetten</button>
                <button type="button" class="btn btn-secondary" disabled=@SaveButtonDisabled @onclick="Save">
                    <span class="oi oi-file" /> Opslaan
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true" hidden="@SaveSpinnerDisabled"></span>
                </button>
                <button type="button" class="btn btn-secondary" disabled=@PrintButtonDisabled @onclick="Print"><span class="oi oi-file" /> Afdrukken</button>
            </div>
        </EditForm>
    </div>

    @if (Svgs != null && Svgs.Count() != 0 && Errors.Count() == 0)
    {
        <div>
            @{
                var groupSvg = Svgs.GroupBy(c => c.Hash);
            }
            @foreach (var group in groupSvg)
            {
                <PlateOverview Svg=group.First() Saw=@CalculatorFormModel.Saw Count=group.Count()/>
            }
        </div>

        <div>
            <PlatesOverview Svgs=@Svgs />
        </div>

        <div>
            <Overview Svgs=@Svgs Saw=@CalculatorFormModel.Saw BlueprintID=@Blueprint.ID QuotationID=@CalculatorFormModel.QuotationID UserID=@CalculatorFormModel.UserID />
        </div>
    }

    @if(Errors != null && Errors.Count() > 0)
    {
        <div class="bg-danger text-white m-5 p-3">
            <h5>Fouten</h5>
            @foreach(string error in Errors)
            {
            <div>
                @error
            </div>
            }
        </div>
    }
</div>

@code {
    private bool SaveButtonDisabled { get; set; } = true;
    private bool PrintButtonDisabled { get; set; } = true;
    private bool LoadButtonDisabled { get; set; } = false;
    private bool SettingsSelected { get; set; } = false;
    private bool ProductsAndItemsSelected { get; set; } = true;
    private bool QuotationSelected { get; set; } = false;
    private bool SaveSpinnerDisabled { get; set; } = true;

    private CalculatorFormModel CalculatorFormModel { get; set; }
    private int PlateArea { get; set; }
    private int ProductArea { get; set; }
    private List<string> Errors { get; set; } = new List<string>();
    private Blueprint Blueprint { get; set; } = new Blueprint();
    private int SearchQuotation { get; set; }
    private List<Svg> Svgs { get; set; }


    protected override void OnInitialized()
    {
        Svgs = new();
        CalculatorFormModel = new();
    }

    private void HandleSubmit()
    {
        Errors.Clear();
        if (Check())
        {
            // Use LocalStorage Veneer setting
            CalculatorFormModel.Plates.ForEach(c => c.Veneer = CalculatorFormModel.Veneer);

            // Find the biggest plate to represent as 100% width
            RotateBiggestSideForCanvasLength();

            // Sort Products from biggest area to smallest
            CalculatorFormModel.Products = CalculatorFormModel.Products.OrderByDescending(c => c.Area).ToList();

            // Create copy of products because ref will change the data
            List<Product> productList = new();

            foreach (Product prod in CalculatorFormModel.Products)
            {
                productList.Add(prod.ShallowCopy());
            }

            // Merge Products with same sizes
            productList = calculateService.CombineProductsWithSameDimentions(productList);

            // Sort Product on area biggest to smallest
            CalculatorFormModel.Plates = CalculatorFormModel.Plates.OrderByDescending(c => c.Priority).ThenByDescending(c => c.Area).ToList();
            productList = productList.OrderByDescending(c => c.Quantity).ThenByDescending(c => c.Area).ToList();

            try
            {
                Svgs = calculateService.Place(CalculatorFormModel.Saw, CalculatorFormModel.Plates, productList.ToList());

            }catch(Exception ex)
            {
                Errors.Add(ex.Message);
            }

            if (Svgs != null && Svgs.Count > 0)
            {
                SaveButtonDisabled = false;
                PrintButtonDisabled = false;
            }
        }
    }

    private void RotateBiggestSideForCanvasLength()
    {
        int biggestLength = CalculatorFormModel.Plates.MaxBy(c => c.LengthWithTrim).LengthWithTrim;
        int biggestWidth = CalculatorFormModel.Plates.MaxBy(c => c.WidthWithTrim).WidthWithTrim;

        if (biggestLength < biggestWidth)
        {
            CalculatorFormModel.Plates.ForEach(c => c.SwitchHeightAndWidth());

            if (CalculatorFormModel.Plates.Any(c => c.Veneer))
            {
                CalculatorFormModel.Products.ForEach(c => c.SwitchHeightAndWidth());
            }
        }
    }

    private bool Check()
    {
        return ProductCheck() && SawCheck() && PlateCheck();
    }
    private bool PlateCheck()
    {
        bool result = CalculatorFormModel.Plates.Any(c => c.Priority != 0);
        if (!result)
        {
            Errors.Add("Min 1 materiaal met PRIO 1 nodig!");
        }
        return result;
    }
    private bool ProductCheck()
    {
        int biggestLength = CalculatorFormModel.Plates.MaxBy(c => c.LengthWithTrim).LengthWithTrim;
        int biggestWidth = CalculatorFormModel.Plates.MaxBy(c => c.WidthWithTrim).WidthWithTrim;
        bool result = false;

        if (CalculatorFormModel.Plates.Any(c => c.Veneer)){
            result = CalculatorFormModel.Products.Any(c => (c.Length <= biggestLength && c.Width <= biggestWidth));
        }
        else
        {
            result = CalculatorFormModel.Products.Any(c => (c.Length <= biggestLength && c.Width <= biggestWidth) || (c.Length <= biggestWidth && c.Width <= biggestLength));
        }

        if (!result)
        {
            Errors.Add("Er is een item die grooter is dan de grootste plaat!");
        }
        return result;
    }
    private bool SawCheck()
    {
        bool result = CalculatorFormModel.Saw != null;
        if (!result)
        {
            Errors.Add("Er is geen zaagblad ingesteld!");
        }
        return result;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (CalculatorFormModel.Saw.ID == null && await localStorage.ContainKeyAsync("currentSaw"))
            {
                CalculatorFormModel.Saw = await localStorage.GetItemAsync<Saw>("currentSaw");
            }
            else
            {
                Saw x = new Saw
                    {
                        ID = "SX0",
                        Thickness = 5
                    };
                await localStorage.SetItemAsync("currentSaw", x);
            }

            if (await localStorage.ContainKeyAsync("currentVeneer"))
            {
                CalculatorFormModel.Veneer = await localStorage.GetItemAsync<bool>("currentVeneer");
            }
            else
            {
                await localStorage.SetItemAsync("currentVeneer", false);
            }

            if (await localStorage.ContainKeyAsync("userID"))
            {
                CalculatorFormModel.UserID = await localStorage.GetItemAsync<string>("userID");
            }
            SearchQuotation = 2300001;
            await Load(); 
            StateHasChanged();
        }
    }

    private void ToggleNav(int nr)
    {
        SettingsSelected = false;
        ProductsAndItemsSelected = false;
        QuotationSelected = false;

        switch (nr)
        {
            case 1:
                SettingsSelected = true;
                break;
            case 2:
                ProductsAndItemsSelected = true;
                break;
            case 3:
                QuotationSelected = true;
                break;
        }
    }
    private async void Reset()
    {
        Svgs = new();
        CalculatorFormModel = new();
        SaveButtonDisabled = true;
        PrintButtonDisabled = true;
        if (await localStorage.ContainKeyAsync("userID"))
        {
            CalculatorFormModel.UserID = await localStorage.GetItemAsync<string>("userID");
        }
        await JSRuntime.InvokeAsync<object>("changeTitle", "Platen Optimalisatie");

    }

    private async void Save()
    {
        SaveButtonDisabled = true;
        SaveSpinnerDisabled = false;
        try
        {
            Blueprint.JsonString = JsonSerializer.Serialize(CalculatorFormModel);
            Blueprint? result = await api.SaveBlueprint(Blueprint);
            if (result != null)
            {
                Blueprint = result;
                await JSRuntime.InvokeAsync<object>("Alert", "Opgeslagen optimalistatieplannummer: " + Blueprint.ID);
            }
        }catch(Exception ex)
        {
            await JSRuntime.InvokeAsync<object>("Alert", "Het opgeslagen van optimalistatieplan is mislukt!");
        }
        SaveSpinnerDisabled = true;
        SaveButtonDisabled = false;
        StateHasChanged();
    }

    private async Task Load()
    {
        if (Blueprint.ID != SearchQuotation)
        {
            LoadButtonDisabled = true;
            try
            {

                Blueprint? result = await api.GetBlueprintById(SearchQuotation);
                if (result != null && result.JsonString != null)
                {
                    Blueprint = result;
                    CalculatorFormModel? calc = JsonSerializer.Deserialize<CalculatorFormModel>(Blueprint.JsonString);

                    if (calc != null)
                    {
                        CalculatorFormModel = calc;
                        HandleSubmit();
                    }
                }
                else
                {
                    await JSRuntime.InvokeAsync<object>("Alert", "Geen optimalistatieplan gevonden voor nummer " + SearchQuotation);
                }

            }catch(Exception ex)
            {
                await JSRuntime.InvokeAsync<object>("Alert", "Het ophalen van gegeven is mislukt!");
            }
            LoadButtonDisabled = false;
            StateHasChanged();
        }
    }
    private async Task Print()
    {
        if(Blueprint.ID == 0)
        {
            await JSRuntime.InvokeAsync<object>("Print", "Plaatoptimalisatie_" + DateTime.Now.ToShortDateString());
        }
        else
        {
            await JSRuntime.InvokeAsync<object>("Print", "Plaatoptimalisatie_" + Blueprint.ID);            
        }
    }
}
