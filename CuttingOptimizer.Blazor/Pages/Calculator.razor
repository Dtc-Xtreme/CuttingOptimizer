@page "/calculator"
@using CuttingOptimizer.AppLogic.Services;
@using CuttingOptimizer.Blazor.Models;
@using CuttingOptimizer.Blazor.Services;
@using CuttingOptimizer.Domain.Models;
@using CuttingOptimizer.Blazor.Components;
@inject ICalculatorService calculateService;
@inject IDrawingService drawingService;

<PageTitle>Calculator</PageTitle>

<h2>Calculator</h2>
<EditForm Model="@calculatorModel" OnSubmit="@HandleSubmit">
    <h4>Zaag</h4>
    <div class="form-row">
        <div class="form-group col-auto">
            <label for="sawID">Zaagblad</label>
            <InputText class="form-control" id="sawID" @bind-Value="calculatorModel.Saw.ID" placeholder="ID" />
        </div>
        <div class="form-group col-auto">
            <label for="sawThickness">Zaagsnede</label>
            <InputNumber class="form-control" id="sawThickness" @bind-Value="calculatorModel.Saw.Thickness" placeholder="Dikte" />
        </div>
    </div>
    <DataAnnotationsValidator />
</EditForm>

<EditForm Model="@calculatorModel" OnSubmit="@AddPlate">
    <h4>Materiaal</h4>
    <div class="form-row">
        <div class="form-group col-auto">
            <label for="plateID">Materiaal</label>
            <InputText class="form-control" id="plateID" @bind-Value="calculatorModel.Plate.ID" />
        </div>
        <div class="form-group col-auto">
            <label for="plateWidth">Thickness</label>
            <InputNumber class="form-control" id="plateWidth" @bind-Value="calculatorModel.Plate.Width" />
        </div>
        <div class="form-group col-auto">
            <label for="plateLength">Thickness</label>
            <InputNumber class="form-control" id="plateLength" @bind-Value="calculatorModel.Plate.Length" />
        </div>
        <div class="form-group col-auto">
            <label for="plateHeight">Dikte</label>
            <InputNumber class="form-control" id="plateHeight" @bind-Value="calculatorModel.Plate.Height" />
        </div>
        <div class="form-group col-auto">
            <label for="plateTrim">Trim</label>
            <InputNumber class="form-control" id="plateTrim" @bind-Value="calculatorModel.Plate.Trim" />
        </div>
        <div class="form-check-inline col-auto">
            <label for="plateVeneer" class="pr-1">Fineer</label>
            <InputCheckbox class="form-control" id="plateVeneer" @bind-Value="calculatorModel.Plate.Veneer" />
        </div>
        <div class="form-check-inline col-auto">
            <button class="btn btn-primary" id="plateVeneer">Toevoegen</button>
        </div>
    </div>
    <DataAnnotationsValidator />
</EditForm>

<EditForm Model="@calculatorModel" OnSubmit="@AddProduct">
    <h4>Item</h4>
    <div class="form-row">
        <div class="form-group col-auto">
            <label for="productID">ID</label>
            <InputText class="form-control" id="productID" @bind-Value="calculatorModel.Product.ID" />
        </div>
        <div class="form-group col-auto">
            <label for="productWidth">Width</label>
            <InputNumber class="form-control" id="productWidth" @bind-Value="calculatorModel.Product.Width" />
        </div>
        <div class="form-group col-auto">
            <label for="productLength">Length</label>
            <InputNumber class="form-control" id="productLength" @bind-Value="calculatorModel.Product.Length" />
        </div>
        <div class="form-group col-auto">
            <label for="productHeight">Height</label>
            <InputNumber class="form-control" id="productHeight" @bind-Value="calculatorModel.Product.Height" />
        </div>
        <div class="form-group col-auto">
            <label for="productInfo">Info</label>
            <InputText class="form-control" id="productInfo" @bind-Value="calculatorModel.Product.Info" />
        </div>
        <div class="form-check-inline col-auto">
            <button class="btn btn-primary" id="plateVeneer">Toevoegen</button>
        </div>
    </div>
    <DataAnnotationsValidator />
</EditForm> 

<Details Plates=@Plates Products=@Products />

@foreach(Plate plate in @Plates)
{
    <Svg Scale=@Scale Plate=plate />
}

<button class="btn btn-primary" @onclick="HandleSubmit">Calc</button>

@code {
    private int Scale { get; set; }
    private int PlateArea { get; set; }
    private int ProductArea { get; set; }
    private List<Plate> Plates { get; set; }
    private List<Product> Products { get; set; }
    public RenderFragment SvgComponent { get; set; }

    private CalculatorModel calculatorModel = new()
        {
            Saw = new(),
            Plate = new(),
            Product = new ()
    };

    protected override void OnInitialized()
    {
        Plates = new List<Plate>
        {
            new Plate("PL1", 2000, 200, 5),
            new Plate("PL2", 1850, 200, 5),
        };

        Products = new List<Product>
        {
            new Product("X1", 1000, 50, 5, "x1")
        };

        HandleSubmit();
    }

    public void HandleSubmit()
    {
        //PlateArea = calculateService.Area(calculatorModel.Plate.Width, calculatorModel.Plate.Length);
        //ProductArea = calculateService.Area(calculatorModel.Product.Width, calculatorModel.Product.Length);
        //bool result = calculateService.CheckIfFits(calculatorModel.Plate, calculatorModel.Product);
        Scale = Plates.Max(c => c.WidthWithTrim) / 100;

        if(Plates.Count == 2 && Products.Count > 0)
        {
            if (Plates[0].Products == null) Plates[0].Products = new();
            Plates[0].Products.Add(Products[0]);

            if (Plates[1].Products == null) Plates[1].Products = new();
            Plates[1].Products.Add(Products[0]);
        }
        string a = "";
    }

    public void AddPlate()
    {
        if (Plates == null) Plates = new List<Plate>();
        Plates.Add(calculatorModel.Plate);
        calculatorModel.Plate = new Plate();
    }

    public void AddProduct()
    {
        if (Products == null) Products = new List<Product>();
        Products.Add(calculatorModel.Product);
        calculatorModel.Product = new Product();
    }
}
