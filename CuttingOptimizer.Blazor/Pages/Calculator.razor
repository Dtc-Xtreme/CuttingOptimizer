@page "/calculator"
@using CuttingOptimizer.AppLogic.Models;
@using CuttingOptimizer.AppLogic.Services;
@using CuttingOptimizer.Blazor.Components
@using CuttingOptimizer.Blazor.Components.Forms
@using CuttingOptimizer.Blazor.Models;
@using CuttingOptimizer.Domain.Models;
@using Blazored.LocalStorage;
@using System.Text.Json;

@inject ICalculatorService calculateService;
@inject ILocalStorageService localStorage;

<PageTitle>Platen Optimalisatie</PageTitle>

<div class="container-fluid">
    <h2 class="no-print">Platen Optimalisatie</h2>
    <div class="no-print mt-3">
        <EditForm Model="@CalculatorFormModel" OnValidSubmit="() => HandleSubmit()">
            <ObjectGraphDataAnnotationsValidator />
            <PlateForm Plates=@CalculatorFormModel.Plates />
            <ProductForm Products=@CalculatorFormModel.Products />
            <ValidationSummary />
            <button type="submit" class="btn btn-primary">Uitrekenen</button>
            <button type="reset" class="btn btn-warning" @onclick="Reset">Reset</button>
        </EditForm>
    </div>

    @if (Svgs != null && Svgs.Count() != 0 && Errors.Count() == 0)
    {
    <div>
        @foreach (Svg svg in Svgs)
        {
           
            <SvgComponent Scale=@Scale Svg=svg Products=@CalculatorFormModel.Products Saw=@Saw />
        }
    </div>

    <div>
            <Overview Svgs=@Svgs Saw=@Saw />
    </div>
    }

    @if(Errors != null && Errors.Count() > 0)
    {
        <div class="bg-danger text-white m-5 p-3">
            <h5>Fouten</h5>
            @foreach(string error in Errors)
            {
            <div>
                @error
            </div>
            }
        </div>
    }
</div>

@code {
    private CalculatorFormModel CalculatorFormModel { get; set; }
    private Saw Saw { get; set; }
    private bool Veneer { get; set; }
    private double Scale { get; set; }
    private int PlateArea { get; set; }
    private int ProductArea { get; set; }
    private List<string> Errors { get; set; } = new List<string>();

    private List<Svg> Svgs { get; set; }

    protected override void OnInitialized()
    {
        Svgs = new();
        CalculatorFormModel = new();

        Saw = new Saw("SX3", 5);

        CalculatorFormModel.Plates = new List<Plate>
        {
            new Plate(1, "PL1", 2000, 500, 5, 0, 1, true),
        };

        CalculatorFormModel.Products = new List<Product>
        {
            new Product(50, "Y1", 900, 50, 5),
            //new Product(20, "X2", 600, 30, 5),
        };

        //CalculatorFormModel.Plates = new List<Plate>
        //{
        //    new Plate(2, "PL1", 2000, 400, 5, 0, 0, true),
        //    //new Plate(2, "PL1", 1000, 500, 5, 0, 1, true),

        //    //new Plate(2, "PL1", 2006, 400, 5, 0, 1),
        //    //new Plate(1, "PL3", 1000, 400, 5, 0, 1),
        //    //new Plate(1, "PL2", 800, 400, 5, 0, 0),
        //};

        //CalculatorFormModel.Products = new List<Product>
        //{
        //    #region VB1
        //    new Product(10, "Y1", 170, 40, 5),
        //    new Product(2, "X2", 800, 40, 5),
        //    new Product(4, "X3", 800, 40, 5),
        //    new Product(30, "K1", 200, 40, 5),
        //    new Product(60, "K2", 200, 40, 5),
        //    new Product(4, "P3", 150, 40, 5)
        //    #endregion

        //    #region VB2
        //    //new Product(10, "Y1", 170, 50, 5),
        //    //new Product(2, "X2", 300, 80, 5),
        //    //new Product(3, "X3", 800, 40, 5),
        //    //new Product(18, "K1", 200, 30, 5),
        //    #endregion

        //    #region VB3
        //    //new Product(1, "Pl215", 999, 40, 5),
        //    //new Product(1, "Pl215", 999, 40, 5)
        //    #endregion
        //};

        //HandleSubmit();
    }

    private void Reset()
    {
        Svgs = new();
        CalculatorFormModel = new();
    }

    public void HandleSubmit()
    {
        Errors.Clear();
        if (Check())
        {
            // Use LocalStorage Veneer setting
            CalculatorFormModel.Plates.ForEach(c => c.Veneer = Veneer);

            // Find the biggest plate to represent as 100% width
            Scale = CalculatorFormModel.Plates.Max(c => c.LengthWithTrim) / (double)100;

            // Sort Products from biggest area to smallest
            CalculatorFormModel.Products = CalculatorFormModel.Products.OrderByDescending(c => c.Area).ToList();

            // Create copy of products because ref will change the data
            List<Product> productList = new();

            foreach (Product prod in CalculatorFormModel.Products)
            {
                productList.Add(prod.ShallowCopy());
            }

            // Merge Products with same sizes
            productList = calculateService.CombineProductsWithSameDimentions(productList);

            // Sort Product on area biggest to smallest
            CalculatorFormModel.Plates = CalculatorFormModel.Plates.OrderByDescending(c => c.Priority).ThenByDescending(c => c.Area).ToList();
            productList = productList.OrderByDescending(c => c.Quantity).ThenByDescending(c => c.Area).ToList();
            Svgs = calculateService.Place(Saw, CalculatorFormModel.Plates, productList.ToList());
        }
    }



    private bool Check()
    {
        bool prod = ProductCheck();
        bool saw = SawCheck();
        bool plate = PlateCheck();
        return prod && saw && plate;
    }
    private bool PlateCheck()
    {
        bool result = CalculatorFormModel.Plates.Any(c => c.Priority != 0);
        if (!result)
        {
            Errors.Add("Min 1 materiaal met PRIO 1 nodig!");
        }
        return result;
    }
    private bool ProductCheck()
    {
        int biggestLength = CalculatorFormModel.Plates.MaxBy(c => c.LengthWithTrim).LengthWithTrim;
        int biggestWidth = CalculatorFormModel.Plates.MaxBy(c => c.WidthWithTrim).WidthWithTrim;
        bool result = CalculatorFormModel.Products.Any(c => c.Length <= biggestLength && c.Width <= biggestWidth);

        if (!result)
        {
            Errors.Add("Er is een item die grooter is dan de grootste plaat!");
        }
        return result;
    }
    private bool SawCheck()
    {
        bool result = Saw != null;
        if (!result)
        {
            Errors.Add("Er is geen zaagblad ingesteld!");
        }
        return result;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //return base.OnAfterRenderAsync(firstRender);
            if (await localStorage.ContainKeyAsync("currentSaw"))
            {
                Saw = await localStorage.GetItemAsync<Saw>("currentSaw");
            }
            else
            {
                Saw x = new Saw
                    {
                        ID = "SX0",
                        Thickness = 5
                    };
                await localStorage.SetItemAsync("currentSaw", x);
            }

            if (await localStorage.ContainKeyAsync("currentVeneer"))
            {
                        Veneer = await localStorage.GetItemAsync<bool>("currentVeneer");            
            }
            else
            {
                await localStorage.SetItemAsync("currentVeneer", false);
            }

            StateHasChanged();
        }

    }
}
