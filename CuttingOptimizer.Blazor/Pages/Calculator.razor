@page "/calculator"
@using CuttingOptimizer.AppLogic.Models;
@using CuttingOptimizer.AppLogic.Services;
@using CuttingOptimizer.Blazor.Models;
@using CuttingOptimizer.Domain.Models;
@using CuttingOptimizer.Blazor.Components;
@inject ICalculatorService calculateService;

<PageTitle>Calculator</PageTitle>

<div class="container-fluid">
    <h2 class="no-print">Calculator</h2>

    <SawForm Saw=@Saw />

    <PlateForm Plates=@Plates />

    <ProductForm Products=@Products />

    <button class="btn btn-primary no-print" @onclick="HandleSubmit">Calc</button>

    @foreach (Svg svg in Svgs)
    {
        <SvgComponent Scale=@Scale Svg=svg Products=@Products Saw=@Saw />
    }
</div>

@code {
    private Saw Saw { get; set; }
    private double Scale { get; set; }
    private int PlateArea { get; set; }
    private int ProductArea { get; set; }
    private List<Plate> Plates { get; set; }
    private List<Product> Products { get; set; }
    private List<Svg> Svgs { get; set; }

    protected override void OnInitialized()
    {
        Saw = new Saw("SX1", 2);

        Svgs = new List<Svg>();

        Plates = new List<Plate>
        {
            new Plate(2, "PL1", 2006, 400, 0, 0, 1),
            //new Plate(2, "PL1", 2006, 400, 0, 0, 1),
            //new Plate(1, "PL3", 1000, 400, 5, 0, 1),
            //new Plate(1, "PL2", 800, 400, 5, 0, 0),
        };

        Products = new List<Product>
        {
            #region VB1
            //new Product(10, "Y1", 170, 40, 5),
            //new Product(2, "X2", 800, 40, 5),
            //new Product(4, "X3", 800, 40, 5),
            //new Product(30, "K1", 200, 40, 5),
            //new Product(60, "K2", 200, 40, 5),
            //new Product(4, "P3", 150, 40, 5),
            #endregion

            #region VB2
            new Product(10, "Y1", 170, 50, 5),
            new Product(2, "X2", 300, 80, 5),
            new Product(3, "X3", 800, 40, 5),
            new Product(18, "K1", 200, 30, 5),
            #endregion
        };

        HandleSubmit();
    }

    private void Reset()
    {
        foreach (Plate plate in Plates)
        {
            plate.Products = new();
        }
    }

    public void HandleSubmit()
    {
        // Clear products out of the plates
        //Reset();

        // Find the biggest plate to represent as 100% width
        Scale = Plates.Max(c => c.LengthWithTrim) / (double)100;

        // Sort Products from biggest area to smallest
        Products = Products.OrderByDescending(c => c.Area).ToList();

        // Create copy of products because ref will change the data
        List<Product> productList = new();

        foreach(Product prod in Products)
        {
            productList.Add(prod.ShallowCopy());
        }

        // Merge Products with same sizes
        productList = calculateService.CombineProductsWithSameDimentions(productList);

        // Sort Product on area biggest to smallest
        Plates = Plates.OrderByDescending(c => c.Priority).ThenByDescending(c => c.Area).ToList();
        productList = productList.OrderByDescending(c => c.Quantity).ThenByDescending(c => c.Area).ToList();

        Svgs = calculateService.Place(Saw, Plates, productList.ToList());
    }
}
