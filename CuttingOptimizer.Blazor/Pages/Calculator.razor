@page "/calculator"
@using CuttingOptimizer.AppLogic.Models;
@using CuttingOptimizer.AppLogic.Services;
@using CuttingOptimizer.Blazor.Components
@using CuttingOptimizer.Blazor.Components.Forms
@using CuttingOptimizer.Blazor.Models;
@using CuttingOptimizer.Domain.Models;
@using Blazored.LocalStorage;
@using System.Text.Json;
@using CuttingOptimizer.AppLogic.Services;

@inject ICalculatorService calculateService;
@inject ILocalStorageService localStorage;
@inject IApiService api;
@inject IJSRuntime JSRuntime;

<PageTitle>Platen Optimalisatie</PageTitle>

<div class="container-fluid">
    <div class="row no-print">
        <div class="col">
            <h2>Platen Optimalisatie</h2>
        </div>

        <div class="col-auto mb-4">
            <div class="row">
                <div class="col">
                    <input type="number" class="form-control" @bind-value="SearchQuotation" placeholder="plan nummer" />
                </div>
                <div class="col-auto">
                    <button type="button" class="btn btn-secondary" disabled=@LoadButtonDisabled @onclick=Load>Ophalen van optimalisatieplan
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true" hidden="@(!LoadButtonDisabled)"></span>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <ul class="no-print nav nav-tabs">
        <li class="nav-item">
            <a class="@SettingNavClass nav-link subnav-link user-select-none" @onclick="() => ToggleNav(true)">Instellingen</a>
        </li>
        <li class="nav-item">
            <a class="@PlateAndItemNavClass nav-link subnav-link user-select-none" @onclick="() => ToggleNav(false)">Materialen & Items</a>
        </li>
    </ul>
    <div class="no-print mt-3">
        <EditForm Model="@CalculatorFormModel" OnValidSubmit="() => HandleSubmit()">
            <ObjectGraphDataAnnotationsValidator />
            <div class="collapse mb-4 @SettingClass">
                <SettingsForm Saw=@CalculatorFormModel.Saw Veneer=@Veneer/>    
            </div>
            <div class="collapse @PlateAndItemClass">
                <div>
                    <PlateForm Plates=@CalculatorFormModel.Plates />
                </div>
                <div class="mt-4">
                    <ProductForm Products=@CalculatorFormModel.Products />
                </div>
                <div>
                    <ValidationSummary />
                </div>
                <div class="col mt-3">
                    <button type="submit" class="btn btn-primary"><span class="oi oi-calculator" /> Uitrekenen</button>
                    <button type="reset" class="btn btn-warning" @onclick="Reset"><span class="oi oi-reload" /> Resetten</button>
                    <button type="button" class="btn btn-secondary" disabled=@SaveButtonDisabled @onclick="Save"><span class="oi oi-file" /> Opslaan
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true" hidden="@SaveSpinnerDisabled"></span>
                    </button>
                    <button type="button" class="btn btn-secondary" disabled=@PrintButtonDisabled @onclick ="Print"><span class="oi oi-file" /> Afdrukken</button>
                </div>
            </div>
        </EditForm>
    </div>

    @if (Svgs != null && Svgs.Count() != 0 && Errors.Count() == 0)
    {
        <div>
            @{
                var groupSvg = Svgs.GroupBy(c => c.Hash);
            }
            @foreach (var group in groupSvg)
            {
                <SvgComponent Scale=@Scale Svg=group.First() Saw=@CalculatorFormModel.Saw Count=group.Count()/>
            }
        </div>

    <div>
            <Overview Svgs=@Svgs Saw=@CalculatorFormModel.Saw QuotationID="@Quotation.ID"/>
    </div>
    }

    @if(Errors != null && Errors.Count() > 0)
    {
        <div class="bg-danger text-white m-5 p-3">
            <h5>Fouten</h5>
            @foreach(string error in Errors)
            {
            <div>
                @error
            </div>
            }
        </div>
    }
</div>

@code {
    private string SettingNavClass { get; set; }
    private string PlateAndItemNavClass { get; set; } = "active";
    private string SettingClass { get; set; }
    private string PlateAndItemClass { get; set; } = "show";
    private bool SaveButtonDisabled { get; set; } = true;
    private bool PrintButtonDisabled { get; set; } = true;
    private bool LoadButtonDisabled { get; set; } = false;
    private bool NavSettingsSelected { get; set; } = false;
    private bool SaveSpinnerDisabled { get; set; } = true;

    private CalculatorFormModel CalculatorFormModel { get; set; }
    private bool Veneer { get; set; }
    private double Scale { get; set; }
    private int PlateArea { get; set; }
    private int ProductArea { get; set; }
    private List<string> Errors { get; set; } = new List<string>();
    private Quotation Quotation { get; set; } = new Quotation();
    private int SearchQuotation { get; set; } = 0;
    private List<Svg> Svgs { get; set; }


    protected override void OnInitialized()
    {
        Svgs = new();
        CalculatorFormModel = new();

        //CalculatorFormModel.Saw = new Saw("SX2", 5);

        //CalculatorFormModel.Plates = new List<Plate>
        //{
        //    new Plate(1, "PL1200", 1000, 200, 5, 0, 1, true),
        //};

        //CalculatorFormModel.Products = new List<Product>
        //{
        //    new Product(1, "Y1", 1000, 200, 5),
        //    //new Product(2, "X2", 2000, 88, 5),
        //};

        //CalculatorFormModel.Plates = new List<Plate>
        //{
        //    new Plate(1, "PL1", 2000, 400, 5, 0, 2, true),
        //    new Plate(1, "PL2", 1000, 500, 5, 0, 1, false)
        //};

        //CalculatorFormModel.Products = new List<Product>
        //{
        //    #region VB1
        //    //new Product(10, "Y1", 170, 40, 5),
        //    //new Product(2, "X2", 800, 40, 5),
        //    //new Product(4, "X3", 800, 40, 5),
        //    //new Product(30, "K1", 200, 40, 5),
        //    //new Product(60, "K2", 200, 40, 5),
        //    //new Product(4, "P3", 150, 40, 5),
        //    #endregion

        //    #region VB2
        //    //new Product(10, "Y1", 170, 50, 5),
        //    //new Product(2, "X2", 300, 80, 5),
        //    //new Product(3, "X3", 800, 40, 5),
        //    //new Product(18, "K1", 200, 30, 5),
        //    #endregion

        //    #region VB3
        //    new Product(1, "Pl215", 999, 40, 5),
        //    new Product(1, "Pl215", 999, 40, 5)
        //    #endregion
        //};

        //HandleSubmit();
    }

    private void HandleSubmit()
    {
        Errors.Clear();
        if (Check())
        {
            // Use LocalStorage Veneer setting
            CalculatorFormModel.Plates.ForEach(c => c.Veneer = Veneer);

            // Find the biggest plate to represent as 100% width
            RotateBiggestSideForCanvasLength();

            // Sort Products from biggest area to smallest
            CalculatorFormModel.Products = CalculatorFormModel.Products.OrderByDescending(c => c.Area).ToList();

            // Create copy of products because ref will change the data
            List<Product> productList = new();

            foreach (Product prod in CalculatorFormModel.Products)
            {
                productList.Add(prod.ShallowCopy());
            }

            // Merge Products with same sizes
            productList = calculateService.CombineProductsWithSameDimentions(productList);

            // Sort Product on area biggest to smallest
            CalculatorFormModel.Plates = CalculatorFormModel.Plates.OrderByDescending(c => c.Priority).ThenByDescending(c => c.Area).ToList();
            productList = productList.OrderByDescending(c => c.Quantity).ThenByDescending(c => c.Area).ToList();
            Svgs = calculateService.Place(CalculatorFormModel.Saw, CalculatorFormModel.Plates, productList.ToList());
            CalculateScale();
            if (Svgs != null && Svgs.Count > 0) ToggleSavePrintButtons();
        }
    }

    private void CalculateScale()
    {
        if(Svgs.Count > 0)
        {
            int biggestLength = Svgs.Max(c => c.ViewBox.Length);
            int biggestWidth = Svgs.Max(c => c.ViewBox.Width);
            Scale = biggestLength < biggestWidth ? biggestWidth / (double)100 : biggestLength / (double)100;
        }
    }

    private void RotateBiggestSideForCanvasLength()
    {
        int biggestLength = CalculatorFormModel.Plates.MaxBy(c => c.LengthWithTrim).LengthWithTrim;
        int biggestWidth = CalculatorFormModel.Plates.MaxBy(c => c.WidthWithTrim).WidthWithTrim;

        // If width is bigger then length and Veneer switch length and width of plate and products??
        if (biggestLength < biggestWidth)
        {
            CalculatorFormModel.Plates.ForEach(c => c.SwitchHeightAndWidth());

            if (CalculatorFormModel.Plates.Any(c => c.Veneer))
            {
                CalculatorFormModel.Products.ForEach(c => c.SwitchHeightAndWidth());
            }
        }
        //Scale = biggestLength < biggestWidth ? biggestWidth / (double)100 : biggestLength / (double)100;
    }

    private bool Check()
    {
        return ProductCheck() && SawCheck() && PlateCheck();
    }
    private bool PlateCheck()
    {
        bool result = CalculatorFormModel.Plates.Any(c => c.Priority != 0);
        if (!result)
        {
            Errors.Add("Min 1 materiaal met PRIO 1 nodig!");
        }
        return result;
    }
    private bool ProductCheck()
    {
        int biggestLength = CalculatorFormModel.Plates.MaxBy(c => c.LengthWithTrim).LengthWithTrim;
        int biggestWidth = CalculatorFormModel.Plates.MaxBy(c => c.WidthWithTrim).WidthWithTrim;
        bool result = false;

        if (CalculatorFormModel.Plates.Any(c => c.Veneer)){
            result = CalculatorFormModel.Products.Any(c => (c.Length <= biggestLength && c.Width <= biggestWidth));
        }
        else
        {
            result = CalculatorFormModel.Products.Any(c => (c.Length <= biggestLength && c.Width <= biggestWidth) || (c.Length <= biggestWidth && c.Width <= biggestLength));
        }

        if (!result)
        {
            Errors.Add("Er is een item die grooter is dan de grootste plaat!");
        }
        return result;
    }
    private bool SawCheck()
    {
        bool result = CalculatorFormModel.Saw != null;
        if (!result)
        {
            Errors.Add("Er is geen zaagblad ingesteld!");
        }
        return result;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //return base.OnAfterRenderAsync(firstRender);
            if (CalculatorFormModel.Saw.ID == null && await localStorage.ContainKeyAsync("currentSaw"))
            {
                CalculatorFormModel.Saw = await localStorage.GetItemAsync<Saw>("currentSaw");
            }
            else
            {
                Saw x = new Saw
                    {
                        ID = "SX0",
                        Thickness = 5
                    };
                await localStorage.SetItemAsync("currentSaw", x);
            }

            if (await localStorage.ContainKeyAsync("currentVeneer"))
            {
                Veneer = await localStorage.GetItemAsync<bool>("currentVeneer");            
            }
            else
            {
                await localStorage.SetItemAsync("currentVeneer", false);
            }

            StateHasChanged();
        }

    }

    private void ToggleSavePrintButtons()
    {
        SaveButtonDisabled = !SaveButtonDisabled;
        PrintButtonDisabled = !PrintButtonDisabled;
    }
    private void ToggleNav(bool settings)
    {
        if (settings)
        {
            SettingNavClass = "active";
            PlateAndItemNavClass = "";
            SettingClass = "show";
            PlateAndItemClass = "";
        }
        else
        {
            PlateAndItemNavClass = "active";
            SettingNavClass = "";
            PlateAndItemClass = "show";
            SettingClass = "";
        }
    }
    private void Reset()
    {
        Svgs = new();
        CalculatorFormModel = new();
        ToggleSavePrintButtons();
    }

    private async void Save()
    {
        SaveButtonDisabled = true;
        SaveSpinnerDisabled = false;
        try
        {
            Quotation.JsonString = JsonSerializer.Serialize(CalculatorFormModel);
            Quotation? result = await api.SaveQuotation(Quotation);
            if (result != null)
            {
                Quotation = result;
                await JSRuntime.InvokeAsync<object>("Alert", "Opgeslagen optimalistatieplannummer: " + Quotation.ID);
            }
        }catch(Exception ex)
        {
            await JSRuntime.InvokeAsync<object>("Alert", "Het opgeslagen van optimalistatieplan is mislukt!");
        }
        SaveSpinnerDisabled = true;
        SaveButtonDisabled = false;
        StateHasChanged();
    }
    private async Task Load()
    {
        if (Quotation.ID != SearchQuotation)
        {
            LoadButtonDisabled = true;
            try
            {

                Quotation? result = await api.GetQuotationById(SearchQuotation);
                if (result != null && result.JsonString != null)
                {
                    Quotation = result;
                    CalculatorFormModel calc = JsonSerializer.Deserialize<CalculatorFormModel>(Quotation.JsonString);

                    if (calc != null)
                    {
                        CalculatorFormModel = calc;
                        HandleSubmit();
                    }
                }
                else
                {
                    await JSRuntime.InvokeAsync<object>("Alert", "Geen optimalistatieplan gevonden voor nummer " + SearchQuotation);
                }

            }catch(Exception ex)
            {
                await JSRuntime.InvokeAsync<object>("Alert", "Het ophalen van gegeven is mislukt!");
            }
            LoadButtonDisabled = false;
            StateHasChanged();
        }
    }
    private async Task Print()
    {
        await JSRuntime.InvokeAsync<object>("Print");
    }
}
